/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ocr;

import com.github.sarxos.webcam.Webcam;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/**
 *
 * @author Yee
 */
public class WebcamGUI extends javax.swing.JFrame {
    Webcam webcam;
    int execution = 0;
    int stop = 0;
    
    public WebcamGUI() {
        initComponents();
        webcam = Webcam.getDefault();
        webcam.setViewSize(new Dimension(640,480));
        webcam.open();
        
        new VideoFeedTaker().start();
        learn.addActionListener(new ActionListener(){  
            @Override
            public void actionPerformed(ActionEvent e){  
                stop = 2;
            }  
        
        });
        learn1.addActionListener(new ActionListener(){  
            @Override
            public void actionPerformed(ActionEvent e){  
                System.out.println("Ohyes");
                stop = 0;
            }  
        
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImageHolder = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Letter = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Notif = new javax.swing.JLabel();
        learn = new javax.swing.JButton();
        learnText = new javax.swing.JTextField();
        learn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Guess:");

        jLabel2.setText("|");

        jLabel3.setText("|");

        Notif.setText("Binarized + cropped + skewed");

        learn.setText("Learn");
        learn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnActionPerformed(evt);
            }
        });

        learnText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnTextActionPerformed(evt);
            }
        });

        learn1.setText("Correct or Bad Image");
        learn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(ImageHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Letter, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(Notif))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(learn1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(learn)
                            .addComponent(learnText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(171, 171, 171))
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jLabel2)
                .addGap(440, 440, 440)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(11, 11, 11)
                        .addComponent(ImageHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(Letter, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Notif)
                        .addGap(132, 132, 132)
                        .addComponent(learnText, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(learn)
                            .addComponent(learn1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void learnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_learnActionPerformed

    private void learn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_learn1ActionPerformed

    private void learnTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_learnTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WebcamGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WebcamGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WebcamGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WebcamGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WebcamGUI().setVisible(true);
            }
        });
    }
    
    class VideoFeedTaker extends Thread{
        @Override
        public void run(){
            Letter.setFont(new Font("Serif", Font.PLAIN, 35));
            while(true){
                if(stop == 0){
                try {
                    Image image = webcam.getImage();
                    ImageHolder.setIcon(new ImageIcon(image));
                    File file = new File(String.format("test-%d.png", 10));
                    ImageIO.write(webcam.getImage(), "PNG", file);
                    System.out.format("Image for %s saved in %s \n", webcam.getName(), file);
                    Database db = new Database();
                    Connection con = db.openConnection();
                    Learning m = new Learning();
                    Binarize binarize = new Binarize();
                    Skew skew = new Skew();
                    Crop crop = new Crop();
                    Thread.sleep(100);
                    char rec;
                    m.cropInitial("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png");
                    binarize.binarizeMe("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png");
                    if(m.checkIfCapable("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png") == 1){
                        System.out.println(m.checkIfCapable("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png"));
                        
                        skew.skew("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png");
                        if(crop.crop("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png") == 1){
                            Notif.setText("Successful.");
                            image = ImageIO.read(new File("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png"));
                            BufferedImage bimg = ImageIO.read(new File("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png"));
                            int width          = bimg.getWidth();
                            int height         = bimg.getHeight();
                            if(width < 50 && height < 50){
                            }else{
                                ImageHolder.setIcon(new ImageIcon(image));
                                rec = m.OCR("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png", con, db);
                                stop = 1;
                                Letter.setText(Character.toString(rec));                                 
                            }
                            Thread.sleep(100);                            
                        }else{
                            Notif.setText("Please try again.");
                        }

                    }

                } catch (InterruptedException ex) {
                    Logger.getLogger(WebcamGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(WebcamGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(WebcamGUI.class.getName()).log(Level.SEVERE, null, ex);
                }                    
                }else if(stop == 1){
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(WebcamGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else{
                    Learning z = new Learning();
                    Database dbz = new Database();
                    Connection conz = dbz.openConnection();
                    stop = 0;
                    try {
                        z.learn("C:/Users/Yee/Documents/NetBeansProjects/OCR/test-10.png", conz, dbz, learnText.getText());
                    } catch (SQLException ex) {
                        Logger.getLogger(WebcamGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ImageHolder;
    private javax.swing.JLabel Letter;
    private javax.swing.JLabel Notif;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton learn;
    private javax.swing.JButton learn1;
    private javax.swing.JTextField learnText;
    // End of variables declaration//GEN-END:variables
}
